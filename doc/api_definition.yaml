swagger: '2.0'
info:
  version: "1.0.0"
  title: DLRN API
host: 127.0.0.1:5000
schemes:
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
# Describe your paths here
paths:
  /api/health:
    get:
      description: |
        Check the API server health. This will trigger a database connection to
        ensure all components are in working condition.
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              result:
                type: string
                description: A simple success string
    post:
      security:
       - basicAuth: []
      description: |
        Check the API server health. This will trigger a database connection to
        ensure all components are in working condition. In addition to this, the
        POST call will check authentication.
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              result:
                type: string
                description: A simple success string

  /api/last_tested_repo:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Get the last tested repo since a specific time.

        If a ``job_id`` is specified, the order of precedence for the repo returned is:
        - The last tested repo within that timeframe for that CI job.
        - The last tested repo within that timeframe for any CI job, so we can have
          several CIs converge on a single repo.
        - The last "consistent" repo, if no repo has been tested in the timeframe.

        If ``sequential_mode`` is set to true, a different algorithm is used. Another
        parameter ``previous_job_id`` needs to be specified, and the order of
        precedence for the repo returned is:

        - The last tested repo within that timeframe for the CI job described by
        ``previous_job_id``.
        - If no repo for ``previous_job_id`` is found, an error will be returned

        The sequential mode is meant to be used by CI pipelines, where a CI (n) job needs
        to use the same repo tested by CI (n-1).
      # This is array of GET operation parameters:
      parameters:
        - name: params
          in: query
          description: The params to post
          schema:
            type: object
            required:
              - max_age
            properties:
              max_age:
                description: |
                  Maximum age (in hours) for the repo to be considered. Any repo
                  tested or being tested after "now - max_age" will be taken
                  into account. If set to 0, all repos will be considered.
                type: integer
                minimum: 0
              success:
                description: |
                  If set to a value, find repos with a successful/unsuccessful
                  vote (as specified). If not set, any tested repo will be
                  considered.
                type: boolean
              job_id:
                description: |
                  Name of the CI that sent the vote. If not set, no filter will
                  be set on CI.
                type: string
              sequential_mode:
                description: |
                  Use the sequential mode algorithm. In this case, return the
                  last tested repo within that timeframe for the CI job
                  described by previous_job_id. Defaults to false.
                type: boolean
              previous_job_id:
                description: |
                  If sequential_mode is set to true, look for jobs tested by
                  the CI identified by previous_job_id.
                type: string
          required: true
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Repo'
    post:
      security:
       - basicAuth: []
      # Describe this verb here. Note: you can use markdown
      description: |
        Get the last tested repo since a specific time (optionally for a CI job),
        and add an "in progress" entry in the CI job table for this.

        If a job_id is specified, the order of precedence for the repo returned is:

        - The last tested repo within that timeframe for that CI job.
        - The last tested repo within that timeframe for any CI job, so we can have
          several CIs converge on a single repo.
        - The last "consistent" repo, if no repo has been tested in the timeframe.

        If ``sequential_mode`` is set to true, a different algorithm is used. Another
        parameter ``previous_job_id`` needs to be specified, and the order of
        precedence for the repo returned is:

        - The last tested repo within that timeframe for the CI job described by
          ``previous_job_id``.
        - If no repo for ``previous_job_id`` is found, an error will be returned

        The sequential mode is meant to be used by CI pipelines, where a CI (n) job needs
        to use the same repo tested by CI (n-1).
      # This is array of POST operation parameters:
      parameters:
        - name: params
          in: body
          description: The JSON params to post
          schema:
            type: object
            required:
              - max_age
              - reporting_job_id
            properties:
              max_age:
                description: |
                  Maximum age (in hours) for the repo to be considered. Any repo
                  tested or being tested after "now - max_age" will be taken
                  into account. If set to 0, all repos will be considered.
                type: integer
                minimum: 0
              reporting_job_id:
                description: |
                  Name of the CI that will add the "in progress" entry in the CI
                  job table.
                type: string
              success:
                description: |
                  If set to a value, find repos with a successful/unsuccessful
                  vote (as specified). If not set, any tested repo will be
                  considered.
                type: boolean
              job_id:
                description: |
                  Name of the CI that sent the vote. If not set, no filter will
                  be set on CI.
                type: string
              sequential_mode:
                description: |
                  Use the sequential mode algorithm. In this case, return the
                  last tested repo within that timeframe for the CI job
                  described by previous_job_id. Defaults to false.
                type: boolean
              previous_job_id:
                description: |
                  If sequential_mode is set to true, look for jobs tested by
                  the CI identified by previous_job_id.
                type: string
          required: true
      # Expected responses for this operation:
      responses:
        # Response code
        201:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Repo'
  /api/repo_status:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Get all the CI reports for a specific repository.
      parameters:
        - name: params
          in: query
          description: The params to post
          required: true
          schema:
            type: object
            required:
              - commit_hash
              - distro_hash
            properties:
              commit_hash:
                description: |
                  commit_hash of the repo to fetch information for.
                type: string
              distro_hash:
                description: |
                  distro_hash of the repo to fetch information for.
                type: string
              extended_hash:
                description: |
                  extended_hash of the repo to fetch information for. If not
                  specified, the latest commit with the commit and distro hash
                  will be used.
                type: string
              success:
                description: |
                  If set to a value, only return the CI reports with the
                  specified vote. If not set, return all CI reports.
                type: boolean
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: An array of votes
          schema:
            title: ArrayOfVotes
            type: array
            items:
              $ref: '#/definitions/CIVote'
  /api/agg_status:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Get all the CI reports for a specific aggregated repository.
      parameters:
        - name: params
          in: query
          description: The params to post
          required: true
          schema:
            type: object
            required:
              - aggregate_hash
            properties:
              aggregate_hash:
                description: |
                  hash of the aggregated repo to fetch information for.
                type: string
              success:
                description: |
                  If set to a value, only return the CI reports with the
                  specified vote. If not set, return all CI reports.
                type: boolean
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: An array of votes
          schema:
            title: ArrayOfAggVotes
            type: array
            items:
              $ref: '#/definitions/AggVote'
  /api/metrics/builds:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Retrieve statistics on the number of builds during a certain period,
        optionally filtered by package name.
      parameters:
        - name: params
          in: query
          description: The params to post
          required: true
          schema:
            type: object
            required:
              - start_date
              - end_date
            properties:
              start_date:
                description: |
                  Start date for the period, in YYYY-mm-dd format.
                  The start date is included in the reference period. information for.
                type: string
              end_date:
                description: |
                  End date for the period, in YYYY-mm-dd format.
                  The end date is not included in the period, so it is
                  start_date <= date < end_date.
                type: string
              package_name:
                description: |
                  If set to a value, report metrics only for the specified
                  package name.
                type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Metrics for the period
          schema:
            $ref: '#/definitions/Metrics'
  /api/civotes.html:
    get:
      description: |
        Get an overview of the CI reports.
      produces:
        - text/html
      parameters:
        - name: offset
          in: query
          description: Start after offset values. Defaults to 0.
          type: integer
      responses:
        # Response code
        200:
          description: An HTML page with the CI votes.
  /api/civotes_agg.html:
    get:
      description: |
        Get an overview of the CI reports on aggregated repositorires.
      produces:
        - text/html
      parameters:
        - name: offset
          in: query
          description: Start after offset values. Defaults to 0.
          type: integer
      responses:
        # Response code
        200:
          description: An HTML page with the CI votes for aggregated repos.
  /api/civotes_detail.html:
    get:
      description: |
        Get a detailed overview of the CI reports for a specific repo, with optional filtering.
      produces:
        - text/html
      parameters:
        - name: commit_hash
          in: query
          description: |
            Filter on this commit hash.
            Either ci_name or a combination of commit_hash+distro_hash are required.
          type: string
        - name: distro_hash
          in: query
          description: |
            Filter on this distro hash.
            Either ci_name or a combination of commit_hash+distro_hash are required.
          type: string
        - name: ci_name
          in: query
          description: |
            Filter on this CI name.
            Either ci_name or a combination of commit_hash+distro_hash are required.
          type: string
        - name: success
          in: query
          description: If set filter for successful/failed CI votes
          type: boolean
        - name: offset
          in: query
          description: Start after offset values. Defaults to 0.
          type: integer
        - name: component
          in: query
          description: If set, only display votes related to this component.
          type: string
      responses:
        # Response code
        200:
          description: An HTML page with the CI votes detail for a repo.
  /api/civotes_agg_detail.html:
    get:
      description: |
        Get a detailed overview of the CI reports for a specific aggregated repo hash,
        with optional filtering.
      produces:
        - text/html
      parameters:
        - name: ref_hash
          in: query
          description: |
            Filter on this aggregated repo hash
            Either ci_name or ref_hash are required.
          type: string
        - name: ci_name
          in: query
          description: |
            Filter on this CI name.
            Either ci_name or ref_hash are required.
          type: string
        - name: success
          in: query
          description: If set filter for successful/failed CI votes
          type: boolean
        - name: offset
          in: query
          description: Start after offset values. Defaults to 0.
          type: integer
      responses:
        # Response code
        200:
          description: An HTML page with the CI votes detail for a repo.
  /api/report.html:
    get:
      description: |
        Get a detailed report of the commit build status, with optional filtering.
      produces:
        - text/html
      parameters:
        - name: package
          in: query
          description: Filter on this package name.
          type: string
        - name: success
          in: query
          description: Filter on this successful/unsuccessful builds.
          type: boolean
        - name: offset
          in: query
          description: Start after offset values. Defaults to 0.
          type: integer
        - name: component
          in: query
          description: If set, only display commits related to this component.
          type: string
      responses:
        # Response code
        200:
          description: An HTML page with the report of the commit build status.
  /api/report_result:
    post:
      security:
       - basicAuth: []
      description: |
        Report the result of a CI job.
      parameters:
        - name: params
          in: body
          description: The JSON params to post
          required: true
          schema:
            type: object
            required:
              - job_id
              - url
              - timestamp
              - success
            properties:
              job_id:
                description: |
                  Name of the CI sending the vote.
                type: string
              commit_hash:
                description: |
                  commit_hash of tested repo.
                type: string
              distro_hash:
                description: |
                  distro_hash of tested repo.
                type: string
              extended_hash:
                description: |
                  extended_hash of the tested repo. If not specified, the latest
                  commit with the commit and distro hash will be used.
                type: string
              aggregate_hash:
                decription: |
                  hash of the aggregated repo that was tested. Either this parameter
                  or a commit_hash and distro_hash must be specified.
              url:
                description: |
                  URL where to find additional information from the CI execution.
                type: string
              timestamp:
                description: |
                  Timestamp (in seconds since the epoch)
                type: integer
              success:
                description: |
                  Was the CI execution successful?
                type: boolean
              notes:
                description: |
                  Additional notes
                type: string
      responses:
        # Response code
        201:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/CIVote'
  /api/promote:
    post:
      security:
       - basicAuth: []
      description: |
        Promote a repository. This can be implemented as a local symlink creation in the DLRN
        worker, or any other form in the future.

        Note the API will refuse to promote using promote_name="consistent" or "current", since
        those are reserved keywords for DLRN. Also, a commit that has been purged from the
        database cannot be promoted.
      parameters:
        - name: params
          in: body
          description: The JSON params to post
          required: true
          schema:
            type: object
            required:
              - commit_hash
              - distro_hash
              - promote_name
            properties:
              commit_hash:
                description: |
                  commit_hash of the repo to be promoted.
                type: string
              distro_hash:
                description: |
                  distro_hash of the repo to be promoted.
                type: string
              extended_hash:
                description: |
                  extended_hash of the repo to be promoted. If not specified,
                  the API will take the last commit built with the commit and
                  distro hash.
                type: string
              promote_name:
                description: |
                  Name to be used for the promotion. In the current
                  implementation, this is the name of the symlink to be created
                type: string
      responses:
        201:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Promotion'
  /api/promote-batch:
    post:
      security:
       - basicAuth: []
      description: |
        Promote a list of commits. This is the equivalent of calling /api/promote
        multiple times, one with each commit/distro_hash combination. The only
        difference is that the call is atomic, and when components are enabled,
        the aggregated repo files are only updated once.

        If any of the individual promotions fail, the API call will try its best
        to undo all the changes to the file system (e.g. symlinks).

        Note the API will refuse to promote using promote_name="consistent" or "current", since
        those are reserved keywords for DLRN. Also, a commit that has been purged from the
        database cannot be promoted.

        The API call will return the last Promotion.
      parameters:
        - name: params
          in: body
          description: The JSON params to post
          required: true
          schema:
            title: ArrayOfPromotionParams
            type: array
            items:
              $ref: '#/definitions/PromotionParam'
      responses:
        201:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Promotion'

  /api/promotions:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Get all the promotions, optionally for a specific repository or promotion name.
        The output will be sorted by the promotion timestamp, with the newest first, and
        limited to 100 results per query.
      parameters:
        - name: params
          in: query
          description: The params to post
          required: true
          schema:
            type: object
            properties:
              commit_hash:
                description: |
                  If set, commit_hash of the repo to use as filter key. Requires distro_hash.
                type: string
              distro_hash:
                description: |
                  If set, distro_hash of the repo to use as filter key. Requires commit_hash.
                type: string
              extended_hash:
                description: |
                  If set, extended_hash of the repo to use as filter key. Requires commit_hash
                  and distro_hash.
                type: string
              aggregate_hash:
                description: |
                  If set, filter for promotions that generated this aggregate_hash.
                type: string
              promote_name:
                description: |
                  If set to a value, filter results by the specified promotion name.
                type: string
              offset:
                description: |
                  If set to a value, skip the initial <offset> promotions.
                type: integer
              limit:
                description: |
                  If set to a value, limit the returned promotions amount to <limit>.
                type: integer
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: An array of promotions
          schema:
            title: ArrayOfPromotions
            type: array
            items:
              $ref: '#/definitions/Promotion'
  /api/remote/import:
    post:
      security:
       - basicAuth: []
      description: |
        Import a commit built by another instance. This API call mimics the behavior of the
        ``dlrn-remote`` command, with the only exception of not being able to specify a custom
        rdoinfo location.
      parameters:
        - name: params
          in: body
          description: The JSON params to post
          required: true
          schema:
            $ref: '#/definitions/Import'
      responses:
        201:
          description: Successful response
          schema:
            $ref: '#/definitions/Import'

definitions:
  CIVote:
    type: object
    properties:
      job_id:
        type: string
        description: name of the CI sending the vote
      commit_hash:
        type: string
        description: commit_hash of tested repo
      distro_hash:
        type: string
        description: distro_hash of tested repo
      extended_hash:
        type: string
        description: extended_hash of tested repo
      aggregate_hash:
        type: string
        description: hash of the aggregated repo
      url:
        type: string
        description: URL where to find additional information from the CI execution
      timestamp:
        type: integer
        description: Timestamp (in seconds since the epoch)
      in_progress:
        type: boolean
        description: is this CI job still in-progress?
      success:
        type: boolean
        description: Was the CI execution successful?
      notes:
        type: string
        description: additional notes
      component:
        type: string
        description: Component associated to the commit/distro hash
  AggVote:
    type: object
    properties:
      job_id:
        type: string
        description: name of the CI sending the vote
      aggregate_hash:
        type: string
        description: hash of the aggregated repo
      url:
        type: string
        description: URL where to find additional information from the CI execution
      timestamp:
        type: integer
        description: Timestamp (in seconds since the epoch)
      in_progress:
        type: boolean
        description: is this CI job still in-progress?
      success:
        type: boolean
        description: Was the CI execution successful?
      notes:
        type: string
        description: additional notes
  Repo:
    type: object
    properties:
      commit_hash:
        type: string
        description: commit_hash of tested repo
      distro_hash:
        type: string
        description: distro_hash of tested repo
      extended_hash:
        type: string
        description: extended_hash of tested repo
      success:
        type: boolean
        description: whether the test was successful or not
      job_id:
        type: string
        description: name of the CI sending the vote
      in_progress:
        type: boolean
        description: is this CI job still in-progress?
      timestamp:
        type: integer
        description: Timestamp for this CI Vote (taken from the DLRN system time)
      user:
        type: string
        description: User who created this CI vote
  Promotion:
    type: object
    properties:
      commit_hash:
        type: string
        description: commit_hash of promoted repo
      distro_hash:
        type: string
        description: distro_hash of promoted repo
      extended_hash:
        type: string
        description: extended_hash of promoted repo
      aggregate_hash:
        type: string
        description: hash of the aggregated repo, when using components
      promote_name:
        type: string
        description: name used for the promotion
      timestamp:
        type: integer
        description: Timestamp for this CI Vote (taken from the DLRN system time)
      user:
        type: string
        description: User who created this promotion
      repo_hash:
        type: string
        description: Repository hash, composed of the commit_hash and short distro_hash
      repo_url:
        type: string
        description: Full URL of the promoted repository.
      component:
        type: string
        description: Component associated to the commit/distro hash
  PromotionQuery:
    type: object
    properties:
      commit_hash:
        type: string
        description: commit_hash of promoted repo
      distro_hash:
        type: string
        description: distro_hash of promoted repo
      extended_hash:
        type: string
        description: extended_hash of promoted repo
      aggregate_hash:
        type: string
        description: hash of the aggregated repo, when using components
      promote_name:
        type: string
        description: name used for the promotion
      offset:
        type: integer
        description: Skip the first <offset> promotions from the results
      limit:
        type: integer
        description: If set to a value, limit the returned promotions amount to <limit>
      component:
        type: string
        description: If set, only report promotions for this component
  PromotionParam:
    type: object
    properties:
      commit_hash:
        type: string
        description: commit_hash of promoted repo
      distro_hash:
        type: string
        description: distro_hash of promoted repo
      extended_hash:
        type: string
        description: extended_hash of promoted repo
      promote_name:
        type: string
        description: name used for the promotion
  Import:
    type: object
    properties:
      repo_url:
        type: string
        description: Base repository URL for imported remote repo
  Metrics:
    type: object
    properties:
      succeeded:
        type: integer
        description: Number of commits that were built successfully in the period
      failed:
        type: integer
        description: Number of commits that failed to build in the period
      total:
        type: integer
        description: Total number of commits processed in the period
